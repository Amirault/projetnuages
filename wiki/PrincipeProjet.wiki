#summary Présentation du projet Nuages

= Introduction =

  * Trouver une image de nuages (ciel partiellement nuageux de préférence)
  * Rechercher de manière automatique des formes "connues" parmi les nuages de la scène.
  * Afficher en surimpression sur l'image d'origine les formes identifiées

== Processus ==

  * Constituer une petite base d'images de ciels nuageux (merci Internet)
  * Traiter ces images de façon à séparer les nuages du ciel, en utilisant un algorithme de clustering (C-moyennes, ou "k-means") dont le code est disponible sur le site Numerical Recipes (http://www.nr.com/), par exemple.
  * Une fois les nuages isolés, utiliser les web-services liés à google pour rechercher des images similaires à tout ou partie d'un nuage.
  * Récupérer les images résultantes (web-service encore) et les afficher avec l'image d'origine.

== Outils utilisés ==

  * Eclipse IDE for JAVA EE Developers (https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/lunasr1a)
  * JDK version 7 (http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html)
  * Subversive Plugin for Eclipse (http://eclipse.org/subversive/downloads.php), choisir SVN Kit 1.8.7

== Quelques liens utiles ==

  * Infos permettant de récupérer des images comme résultats d'une requête Google : http://googlecode.blogspot.fr/2012/02/image-results-now-available-from-custom.html
  * Bing search API : http://datamarket.azure.com/dataset/bing/search
  * API Flickr : https://www.flickr.com/services/api

== Livrables ==

  * Rapport collectif rassemblant :
      * Une présentation des sous-groupes
      * Les travaux effectués par chacun des sous-groupes
      * Les outils utilisés
      * Des exemples de fonctionnement de votre programme
      * Une partie indiquant la façon dont vous avez géré et perçu le travail d'équipe
  * Manuel d'utilisateur
  * Documentation
  * Programme en état de fonctionnement
  * Démo (date à fixer) 

== Normes de codage ==

  * http://www.jmdoudoux.fr/java/dej/chap-normes-dev.htm
  * Nom des variables/fonctions/classes en *Anglais*
  * Javadoc : documenter ses fonctions/classes

== Commit ==

  * N'importe qui peut commiter sur le svn
  * Lorsque vous commitez, faire en sorte que le commit soit complet. *1 commit par jour par personne maximum autorisé.* Après le commit, vous devez préparer une code review request aux membres de votre équipe, notamment le coordinateur pour qu'il relise votre code et submit votre request.
  * Chaque équipe commit dans son package situé dans /trunk/src